{"version":3,"file":"static/js/773.ab4f0360.chunk.js","mappings":"uKAAO,IAAMA,EAAmB,SAAAC,GAC5B,OAAKA,EAIDA,EAAUC,SAAS,SACZD,EAAUE,MAAM,EAAGF,EAAUG,QAGnB,MAAjBH,EAAU,GACN,kCAAN,OAAyCA,GAGrC,mCAAN,OAA0CA,GAXjC,wHAYV,C,2JCZUI,EAAOC,EAAAA,GAAAA,GAAH,wJASJC,EAAOD,EAAAA,GAAAA,GAAH,sLAUJE,EAAQF,EAAAA,GAAAA,IAAH,oGAOLG,EAAOH,EAAAA,GAAAA,IAAH,uIAQJI,EAAWJ,EAAAA,GAAAA,EAAH,iEAKRK,EAAaL,EAAAA,GAAAA,EAAH,qEAKVM,EAAUN,EAAAA,GAAAA,IAAH,2C,SCapB,EA3CgB,WACd,OAA8BO,EAAAA,EAAAA,UAAS,CAAC,GAAxC,eAAOC,EAAP,KAAgBC,EAAhB,KAEQC,GAAOC,EAAAA,EAAAA,MAAPD,GAQR,OANAE,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAAA,iBAAqBH,GAAII,MAAK,YAAe,IAAZC,EAAW,EAAXA,KAC/BN,EAAWM,EAAKC,QACjB,GACF,GAAE,CAACN,IAEgC,IAAhCO,OAAOC,KAAKV,GAASV,QAChB,sEAIP,gBAAKqB,MAAO,CAAEC,QAAS,QAAvB,UACE,SAACrB,EAAD,UACGS,EAAQa,KAAI,SAAAC,GAAO,OAClB,UAACrB,EAAD,YACE,SAACC,EAAD,CACEqB,MAAM,KACNC,OAAO,KACPC,KAAK/B,EAAAA,EAAAA,GAAiB4B,EAAQI,eAAeC,aAC7CC,IAAKN,EAAQO,UAGf,UAAC1B,EAAD,YACE,SAACC,EAAD,UAAWkB,EAAQO,UAEnB,SAACxB,EAAD,UACG,IAAIyB,KAAKR,EAAQS,YAAYC,2BAIlC,SAAC1B,EAAD,UAAUgB,EAAQW,YAhBTX,EAAQZ,GADD,OAuB3B,C,mGCvDKwB,EAAU,mCACVC,EAAW,+BAEJC,EAAU,mCAAG,sGAEZC,EAFY,UAEHF,EAFG,uCAEoCD,GAFpC,SAGCI,EAAAA,EAAAA,IAAUD,GAHX,cAGZtB,EAHY,yBAKXA,GALW,gCAQlBwB,QAAQC,MAAR,MARkB,yDAAH,qDAYVC,EAAa,mCAAG,WAAM/B,GAAN,yFAEnB2B,EAFmB,UAEVF,EAFU,kBAEQzB,EAFR,oBAEsBwB,GAFtB,SAGJI,EAAAA,EAAAA,IAAUD,GAHN,cAGlBtB,EAHkB,yBAKlBA,GALkB,gCAOzBwB,QAAQC,MAAR,MAPyB,yDAAH,sDAYbE,EAAgB,mCAAG,WAAMC,GAAN,yFAEtBN,EAFsB,UAEbF,EAFa,iCAEoBD,EAFpB,kBAEqCS,GAFrC,SAGPL,EAAAA,EAAAA,IAAUD,GAHH,cAGrBtB,EAHqB,yBAKrBA,GALqB,gCAO5BwB,QAAQC,MAAR,MAP4B,yDAAH,sDAWdI,EAAa,mCAAG,WAAMlC,GAAN,yFAEnB2B,EAFmB,UAEVF,EAFU,kBAEQzB,EAFR,4BAE8BwB,GAF9B,SAGJI,EAAAA,EAAAA,IAAUD,GAHN,cAGlBtB,EAHkB,yBAKlBA,GALkB,gCAOzBwB,QAAQC,MAAR,MAPyB,yDAAH,sDAWbK,EAAgB,mCAAG,WAAMnC,GAAN,yFAEtB2B,EAFsB,UAEbF,EAFa,kBAEKzB,EAFL,4BAE2BwB,GAF3B,SAGPI,EAAAA,EAAAA,IAAUD,GAHH,cAGrBtB,EAHqB,yBAKrBA,GALqB,gCAO5BwB,QAAQC,MAAR,MAP4B,yDAAH,sDAWhB3B,EAAM,CACjBuB,WAAAA,EACAM,iBAAAA,EACAD,cAAAA,EACAG,cAAAA,EACAC,iBAAAA,E","sources":["components/ImagePlaceholder/ImagePlaceholder.js","pages/Movies/Reviews/Reviews.styled.js","pages/Movies/Reviews/Reviews.jsx","service/api.js"],"sourcesContent":["export const ImagePlaceholder = pathImage => {\n    if (!pathImage) {\n      return 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/No-Image-Placeholder.svg/1665px-No-Image-Placeholder.svg.png';\n    }\n\n    if (pathImage.includes('https')) {\n        return pathImage.slice(1, pathImage.length);\n      }\n  \n    if (pathImage[0] === '/') {\n      return `https://image.tmdb.org/t/p/w500${pathImage}`;\n    }\n  \n    return `https://image.tmdb.org/t/p/w500/${pathImage}`;\n  };","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin-top: 20px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: flex-start;\n  justify-content: start;\n  gap: 20px;\n  padding: 10px;\n  border: 1px solid darkred;\n  border-radius: 5px;\n`;\n\nexport const Image = styled.img`\n  display: block;\n  width: 70px;\n  height: 70px;\n  border-radius: 50px;\n`;\n\nexport const Info = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const UserName = styled.p`\n  font-size: 18px;\n  font-weight: 600;\n`;\n\nexport const DateCreate = styled.p`\n  display: flex;\n  justify-self: self-end;\n`;\n\nexport const Comment = styled.div`\n  max-width: 80%;\n`;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { api } from 'service/api';\n\nimport { ImagePlaceholder } from 'components/ImagePlaceholder/ImagePlaceholder';\nimport {\n  List,\n  Item,\n  Image,\n  Info,\n  UserName,\n  DateCreate,\n  Comment,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState({});\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    api.fetchFilmReviews(id).then(({ data }) => {\n      setReviews(data.results);\n    });\n  }, [id]);\n\n  if (Object.keys(reviews).length === 0) {\n    return <p>We don't have any reviews for this movie.</p>;\n  }\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <List>\n        {reviews.map(comment => (\n          <Item key={comment.id}>\n            <Image\n              width=\"70\"\n              height=\"70\"\n              src={ImagePlaceholder(comment.author_details.avatar_path)}\n              alt={comment.author}\n            />\n\n            <Info>\n              <UserName>{comment.author}</UserName>\n\n              <DateCreate>\n                {new Date(comment.updated_at).toLocaleDateString()}\n              </DateCreate>\n            </Info>\n\n            <Comment>{comment.content}</Comment>\n          </Item>\n        ))}\n      </List>\n    </div>\n  );\n};\n\nexport default Reviews;","import axios from \"axios\";\n\nconst API_KEY = '96b1936b39533cd9542a6bf2c841f4c7';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const fetchFilms = async () => {\n    try {\n        const url = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`;\n        const data = await axios.get(url);\n\n        return data;\n        \n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport const fetchFilmById = async id => {\n  try {\n    const url = `${BASE_URL}/movie/${id}?api_key=${API_KEY}`;\n    const  data  = await axios.get(url);\n\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n\nexport const fetchFilmsByName = async filmName => {\n  try {\n    const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${filmName}`;\n    const  data  = await axios.get(url);\n\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n  \n  export const fetchFilmCast = async id => {\n    try {\n      const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`;\n      const  data  = await axios.get(url);\n  \n      return data;\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  \n  export const fetchFilmReviews = async id => {\n    try {\n      const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`;\n      const  data  = await axios.get(url);\n  \n      return data;\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  \n  export const api = {\n    fetchFilms,\n    fetchFilmsByName,\n    fetchFilmById,\n    fetchFilmCast,\n    fetchFilmReviews,\n  };\n"],"names":["ImagePlaceholder","pathImage","includes","slice","length","List","styled","Item","Image","Info","UserName","DateCreate","Comment","useState","reviews","setReviews","id","useParams","useEffect","api","then","data","results","Object","keys","style","display","map","comment","width","height","src","author_details","avatar_path","alt","author","Date","updated_at","toLocaleDateString","content","API_KEY","BASE_URL","fetchFilms","url","axios","console","error","fetchFilmById","fetchFilmsByName","filmName","fetchFilmCast","fetchFilmReviews"],"sourceRoot":""}