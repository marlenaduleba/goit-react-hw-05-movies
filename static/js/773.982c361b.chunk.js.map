{"version":3,"file":"static/js/773.982c361b.chunk.js","mappings":"uKAAO,IAAMA,EAAmB,SAAAC,GAC5B,OAAKA,EAIDA,EAAUC,SAAS,SACZD,EAAUE,MAAM,EAAGF,EAAUG,QAGnB,MAAjBH,EAAU,GACN,kCAAN,OAAyCA,GAGrC,mCAAN,OAA0CA,GAXjC,wHAYV,C,2JCZUI,EAAOC,EAAAA,GAAAA,GAAH,wJASJC,EAAOD,EAAAA,GAAAA,GAAH,sLAUJE,EAAQF,EAAAA,GAAAA,IAAH,oGAOLG,EAAOH,EAAAA,GAAAA,IAAH,uIAQJI,EAAWJ,EAAAA,GAAAA,EAAH,iEAKRK,EAAaL,EAAAA,GAAAA,EAAH,qEAKVM,EAAUN,EAAAA,GAAAA,IAAH,2C,SCiBpB,EA/CgB,WACd,OAA8BO,EAAAA,EAAAA,UAAS,CAAC,GAAxC,eAAOC,EAAP,KAAgBC,EAAhB,KAEQC,GAAOC,EAAAA,EAAAA,MAAPD,GAYR,OAVAE,EAAAA,EAAAA,YAAU,WACR,IACEC,EAAAA,EAAAA,iBAAqBH,GAAII,MAAK,YAAe,IAAZC,EAAW,EAAXA,KAC/BN,EAAWM,EAAKC,QACjB,GAGF,CAFC,MAAOC,GACPC,QAAQC,IAAIF,EACb,CACF,GAAE,CAACP,IAEgC,IAAhCU,OAAOC,KAAKb,GAASV,QAChB,sEAIP,gBAAKwB,MAAO,CAAEC,QAAS,QAAvB,UACE,SAACxB,EAAD,UACGS,EAAQgB,KAAI,SAAAC,GAAO,OAClB,UAACxB,EAAD,YACE,SAACC,EAAD,CACEwB,MAAM,KACNC,OAAO,KACPC,KAAKlC,EAAAA,EAAAA,GAAiB+B,EAAQI,eAAeC,aAC7CC,IAAKN,EAAQO,UAGf,UAAC7B,EAAD,YACE,SAACC,EAAD,UAAWqB,EAAQO,UAEnB,SAAC3B,EAAD,UACG,IAAI4B,KAAKR,EAAQS,YAAYC,2BAIlC,SAAC7B,EAAD,UAAUmB,EAAQW,YAhBTX,EAAQf,GADD,OAuB3B,C,wFC3DK2B,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAGPC,EAAU,mCAAG,8FAAkBL,EAASM,IAAT,uBAAlB,mFAAH,qDAEVC,EAAgB,mCAAG,WAAMC,GAAN,iFACjBR,EAASM,IAAT,gBAA8B,CAAEH,OAAQ,CAAEK,MAAAA,KADzB,mFAAH,sDAGhBC,EAAa,mCAAG,WAAMpC,GAAN,iFAAkB2B,EAASM,IAAT,iBAAuBjC,IAAzC,mFAAH,sDAEbqC,EAAa,mCAAG,WAAMrC,GAAN,iFAAkB2B,EAASM,IAAT,iBAAuBjC,EAAvB,aAAlB,mFAAH,sDAEbsC,EAAgB,mCAAG,WAAMtC,GAAN,iFAAkB2B,EAASM,IAAT,iBAAuBjC,EAAvB,aAAlB,mFAAH,sDAETG,EAAM,CACjB6B,WAAAA,EACAE,iBAAAA,EACAE,cAAAA,EACAC,cAAAA,EACAC,iBAAAA,E","sources":["components/ImagePlaceholder/ImagePlaceholder.js","pages/Movies/Reviews/Reviews.styled.js","pages/Movies/Reviews/Reviews.jsx","service/api.js"],"sourcesContent":["export const ImagePlaceholder = pathImage => {\n    if (!pathImage) {\n      return 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/No-Image-Placeholder.svg/1665px-No-Image-Placeholder.svg.png';\n    }\n\n    if (pathImage.includes('https')) {\n        return pathImage.slice(1, pathImage.length);\n      }\n  \n    if (pathImage[0] === '/') {\n      return `https://image.tmdb.org/t/p/w500${pathImage}`;\n    }\n  \n    return `https://image.tmdb.org/t/p/w500/${pathImage}`;\n  };","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin-top: 20px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: flex-start;\n  justify-content: start;\n  gap: 20px;\n  padding: 10px;\n  border: 1px solid darkred;\n  border-radius: 5px;\n`;\n\nexport const Image = styled.img`\n  display: block;\n  width: 70px;\n  height: 70px;\n  border-radius: 50px;\n`;\n\nexport const Info = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const UserName = styled.p`\n  font-size: 18px;\n  font-weight: 600;\n`;\n\nexport const DateCreate = styled.p`\n  display: flex;\n  justify-self: self-end;\n`;\n\nexport const Comment = styled.div`\n  max-width: 80%;\n`;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { api } from 'service/api';\n\nimport { ImagePlaceholder } from 'components/ImagePlaceholder/ImagePlaceholder';\nimport {\n  List,\n  Item,\n  Image,\n  Info,\n  UserName,\n  DateCreate,\n  Comment,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState({});\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    try {\n      api.fetchFilmReviews(id).then(({ data }) => {\n        setReviews(data.results);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }, [id]);\n\n  if (Object.keys(reviews).length === 0) {\n    return <p>We don't have any reviews for this movie.</p>;\n  }\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <List>\n        {reviews.map(comment => (\n          <Item key={comment.id}>\n            <Image\n              width=\"70\"\n              height=\"70\"\n              src={ImagePlaceholder(comment.author_details.avatar_path)}\n              alt={comment.author}\n            />\n\n            <Info>\n              <UserName>{comment.author}</UserName>\n\n              <DateCreate>\n                {new Date(comment.updated_at).toLocaleDateString()}\n              </DateCreate>\n            </Info>\n\n            <Comment>{comment.content}</Comment>\n          </Item>\n        ))}\n      </List>\n    </div>\n  );\n};\n\nexport default Reviews;","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '96b1936b39533cd9542a6bf2c841f4c7',\n  },\n});\nconst fetchFilms = async () => await instance.get(`/trending/movie/day`);\n\nconst fetchFilmsByName = async query =>\n  await instance.get(`/search/movie`, { params: { query } });\n\nconst fetchFilmById = async id => await instance.get(`/movie/${id}`);\n\nconst fetchFilmCast = async id => await instance.get(`/movie/${id}/credits`);\n\nconst fetchFilmReviews = async id => await instance.get(`/movie/${id}/reviews`);\n\nexport const api = {\n  fetchFilms,\n  fetchFilmsByName,\n  fetchFilmById,\n  fetchFilmCast,\n  fetchFilmReviews,\n};\n"],"names":["ImagePlaceholder","pathImage","includes","slice","length","List","styled","Item","Image","Info","UserName","DateCreate","Comment","useState","reviews","setReviews","id","useParams","useEffect","api","then","data","results","error","console","log","Object","keys","style","display","map","comment","width","height","src","author_details","avatar_path","alt","author","Date","updated_at","toLocaleDateString","content","instance","axios","baseURL","params","api_key","fetchFilms","get","fetchFilmsByName","query","fetchFilmById","fetchFilmCast","fetchFilmReviews"],"sourceRoot":""}